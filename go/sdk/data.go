package sdk

import (
	"context"
	"io"

	"google.golang.org/grpc"
	"gopkg.in/meyskens/lookout-sdk.v0/pb"
)

// ChangesRequest defines a request of Changes to the Data service.
type ChangesRequest = pb.ChangesRequest

// FilesRequest defines a request of Files to the Data service.
type FilesRequest = pb.FilesRequest

// Change contains two versions of a File in a revision range.
type Change = pb.Change

// File is a repository file.
type File = pb.File

// DataClient is the client API for Data service.
type DataClient struct {
	dataClient pb.DataClient
}

// NewDataClient creates new DataClient using gRPC connection
func NewDataClient(cc *grpc.ClientConn) *DataClient {
	return &DataClient{
		dataClient: pb.NewDataClient(cc),
	}
}

// GetChanges returns a Changes scanner
func (c *DataClient) GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (*ChangeScanner, error) {
	resp, err := c.dataClient.GetChanges(ctx, in, opts...)
	if err != nil {
		return nil, err
	}

	if err := resp.CloseSend(); err != nil {
		return nil, err
	}

	return &ChangeScanner{
		client: resp,
	}, nil

}

// GetFiles returns a Files scanner
func (c *DataClient) GetFiles(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FileScanner, error) {
	resp, err := c.dataClient.GetFiles(ctx, in, opts...)
	if err != nil {
		return nil, err
	}

	if err := resp.CloseSend(); err != nil {
		return nil, err
	}

	return &FileScanner{
		client: resp,
	}, nil

}

// ChangeScanner provides a convenient interface for reading Changes from lookout server
type ChangeScanner struct {
	client pb.Data_GetChangesClient
	val    *Change
	err    error
	done   bool
}

// Next advances the scanner to the next change,
// which will then be available through Change method.
// It returns false when the scan stops, either by reaching the end of the stream or an error.
// After Next returns false, the Err method will return any error that occurred during scanning,
// except that if it was io.EOF, Err will return nil.
func (s *ChangeScanner) Next() bool {
	if s.done {
		return false
	}

	s.val, s.err = s.client.Recv()
	if s.err == io.EOF {
		s.err = nil
		s.done = true
		return false
	}

	if s.err != nil {
		s.done = true
		return false
	}

	return true
}

// Err returns the first non-EOF error that was encountered by the scanner.
func (s *ChangeScanner) Err() error {
	return s.err
}

// Change returns the most recent change generated by a call to Next.
func (s *ChangeScanner) Change() *Change {
	return s.val
}

// Close closes underlying grcp stream
func (s *ChangeScanner) Close() error {
	return s.client.CloseSend()
}

// FileScanner provides a convenient interface for reading Files from lookout server
type FileScanner struct {
	client pb.Data_GetFilesClient
	val    *File
	err    error
	done   bool
}

// Next advances the scanner to the next file,
// which will then be available through File method.
// It returns false when the scan stops, either by reaching the end of the stream or an error.
// After Next returns false, the Err method will return any error that occurred during scanning,
// except that if it was io.EOF, Err will return nil.
func (s *FileScanner) Next() bool {
	if s.done {
		return false
	}

	s.val, s.err = s.client.Recv()
	if s.err == io.EOF {
		s.err = nil
		s.done = true
		return false
	}

	if s.err != nil {
		s.done = true
		return false
	}

	return true
}

// Err returns the first non-EOF error that was encountered by the scanner.
func (s *FileScanner) Err() error {
	return s.err
}

// File returns the most recent file generated by a call to Next.
func (s *FileScanner) File() *File {
	return s.val
}

// Close closes underlying grcp stream
func (s *FileScanner) Close() error {
	return s.client.CloseSend()
}
